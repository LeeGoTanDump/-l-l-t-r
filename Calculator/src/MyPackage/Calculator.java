/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package MyPackage;

/**
 *
 * @author Daniel
 */

import com.formdev.flatlaf.FlatLightLaf;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.UIManager;
import java.util.Stack;
import java.text.DecimalFormat;
import java.awt.*;
import javax.swing.ImageIcon;

public class Calculator extends javax.swing.JFrame {
    private String expression = "";
    
    /**
     * Creates new form Calculator
     */
    public Calculator() {
        initComponents();
        Image img = new ImageIcon(this.getClass().getResource("CalculatorLogo.png")).getImage();
        this.setIconImage(img);
        setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        Subtract = new javax.swing.JButton();
        Delete = new javax.swing.JButton();
        Add = new javax.swing.JButton();
        Equal = new javax.swing.JButton();
        NegativeOrPositive = new javax.swing.JButton();
        Multiply = new javax.swing.JButton();
        Nine = new javax.swing.JButton();
        Six = new javax.swing.JButton();
        Three = new javax.swing.JButton();
        Point = new javax.swing.JButton();
        Divide = new javax.swing.JButton();
        Eight = new javax.swing.JButton();
        Five = new javax.swing.JButton();
        Two = new javax.swing.JButton();
        Zero = new javax.swing.JButton();
        Clear = new javax.swing.JButton();
        Seven = new javax.swing.JButton();
        Four = new javax.swing.JButton();
        One = new javax.swing.JButton();
        Output = new javax.swing.JTextField();
        Input = new javax.swing.JTextField();
        Credits = new javax.swing.JTextField();

        jTextField1.setText("jTextField1");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Calculator");
        setBackground(new java.awt.Color(244, 244, 244));

        jLayeredPane1.setBackground(new java.awt.Color(255, 255, 255));
        jLayeredPane1.setOpaque(true);

        Subtract.setFont(new java.awt.Font("SansSerif", 1, 28)); // NOI18N
        Subtract.setForeground(new java.awt.Color(39, 199, 111));
        Subtract.setText("━");
        Subtract.setBorder(null);
        Subtract.setFocusPainted(false);
        Subtract.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubtractActionPerformed(evt);
            }
        });

        Delete.setFont(new java.awt.Font("SansSerif", 1, 20)); // NOI18N
        Delete.setForeground(new java.awt.Color(39, 199, 111));
        Delete.setText("⌫");
        Delete.setBorder(null);
        Delete.setBorderPainted(false);
        Delete.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Delete.setFocusPainted(false);
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });

        Add.setFont(new java.awt.Font("SansSerif", 1, 28)); // NOI18N
        Add.setForeground(new java.awt.Color(39, 199, 111));
        Add.setText("+");
        Add.setBorder(null);
        Add.setFocusPainted(false);
        Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddActionPerformed(evt);
            }
        });

        Equal.setBackground(new java.awt.Color(39, 199, 111));
        Equal.setFont(new java.awt.Font("SansSerif", 0, 28)); // NOI18N
        Equal.setForeground(new java.awt.Color(255, 255, 255));
        Equal.setText("=");
        Equal.setBorder(null);
        Equal.setFocusPainted(false);
        Equal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EqualActionPerformed(evt);
            }
        });

        NegativeOrPositive.setFont(new java.awt.Font("SansSerif", 0, 28)); // NOI18N
        NegativeOrPositive.setText("+/-");
        NegativeOrPositive.setBorder(null);
        NegativeOrPositive.setFocusPainted(false);
        NegativeOrPositive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NegativeOrPositiveActionPerformed(evt);
            }
        });

        Multiply.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        Multiply.setForeground(new java.awt.Color(39, 199, 111));
        Multiply.setText("×");
        Multiply.setBorder(null);
        Multiply.setFocusPainted(false);
        Multiply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MultiplyActionPerformed(evt);
            }
        });

        Nine.setFont(new java.awt.Font("SansSerif", 0, 24)); // NOI18N
        Nine.setText("9");
        Nine.setBorder(null);
        Nine.setFocusPainted(false);
        Nine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NineActionPerformed(evt);
            }
        });

        Six.setFont(new java.awt.Font("SansSerif", 0, 24)); // NOI18N
        Six.setText("6");
        Six.setBorder(null);
        Six.setFocusPainted(false);
        Six.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SixActionPerformed(evt);
            }
        });

        Three.setFont(new java.awt.Font("SansSerif", 0, 24)); // NOI18N
        Three.setText("3");
        Three.setBorder(null);
        Three.setFocusPainted(false);
        Three.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ThreeActionPerformed(evt);
            }
        });

        Point.setFont(new java.awt.Font("SansSerif", 0, 24)); // NOI18N
        Point.setText(".");
        Point.setBorder(null);
        Point.setFocusPainted(false);
        Point.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PointActionPerformed(evt);
            }
        });

        Divide.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        Divide.setForeground(new java.awt.Color(39, 199, 111));
        Divide.setText("÷");
        Divide.setBorder(null);
        Divide.setFocusPainted(false);
        Divide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DivideActionPerformed(evt);
            }
        });

        Eight.setFont(new java.awt.Font("SansSerif", 0, 24)); // NOI18N
        Eight.setText("8");
        Eight.setBorder(null);
        Eight.setFocusPainted(false);
        Eight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EightActionPerformed(evt);
            }
        });

        Five.setFont(new java.awt.Font("SansSerif", 0, 24)); // NOI18N
        Five.setText("5");
        Five.setBorder(null);
        Five.setFocusPainted(false);
        Five.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FiveActionPerformed(evt);
            }
        });

        Two.setFont(new java.awt.Font("SansSerif", 0, 24)); // NOI18N
        Two.setText("2");
        Two.setBorder(null);
        Two.setFocusPainted(false);
        Two.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TwoActionPerformed(evt);
            }
        });

        Zero.setFont(new java.awt.Font("SansSerif", 0, 24)); // NOI18N
        Zero.setText("0");
        Zero.setBorder(null);
        Zero.setFocusPainted(false);
        Zero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ZeroActionPerformed(evt);
            }
        });

        Clear.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        Clear.setForeground(new java.awt.Color(243, 69, 70));
        Clear.setText("C");
        Clear.setBorder(null);
        Clear.setFocusPainted(false);
        Clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearActionPerformed(evt);
            }
        });

        Seven.setFont(new java.awt.Font("SansSerif", 0, 24)); // NOI18N
        Seven.setText("7");
        Seven.setBorder(null);
        Seven.setFocusPainted(false);
        Seven.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SevenActionPerformed(evt);
            }
        });

        Four.setFont(new java.awt.Font("SansSerif", 0, 24)); // NOI18N
        Four.setText("4");
        Four.setBorder(null);
        Four.setFocusPainted(false);
        Four.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FourActionPerformed(evt);
            }
        });

        One.setFont(new java.awt.Font("SansSerif", 0, 24)); // NOI18N
        One.setText("1");
        One.setBorder(null);
        One.setFocusPainted(false);
        One.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OneActionPerformed(evt);
            }
        });

        jLayeredPane1.setLayer(Subtract, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(Delete, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(Add, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(Equal, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(NegativeOrPositive, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(Multiply, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(Nine, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(Six, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(Three, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(Point, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(Divide, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(Eight, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(Five, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(Two, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(Zero, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(Clear, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(Seven, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(Four, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(One, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Clear, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Seven, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Four, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(One, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NegativeOrPositive, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Divide, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Eight, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Five, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Two, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Zero, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Multiply, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Nine, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Six, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Three, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Point, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Equal, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Add, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Delete, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Subtract, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Delete, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Multiply, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Divide, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Clear, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Subtract, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Nine, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Eight, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Seven, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Add, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Six, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Five, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Four, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jLayeredPane1Layout.createSequentialGroup()
                        .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Three, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Two, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(One, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Point, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Zero, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(NegativeOrPositive, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(Equal, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        Output.setEditable(false);
        Output.setFont(new java.awt.Font("sansserif", 0, 20)); // NOI18N
        Output.setForeground(new java.awt.Color(85, 85, 85));
        Output.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        Output.setBorder(null);
        Output.setDisabledTextColor(new java.awt.Color(244, 244, 244));
        Output.setFocusable(false);
        Output.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OutputActionPerformed(evt);
            }
        });

        Input.setBackground(new java.awt.Color(242, 242, 242));
        Input.setFont(new java.awt.Font("sansserif", 0, 20)); // NOI18N
        Input.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        Input.setBorder(null);
        Input.setDisabledTextColor(new java.awt.Color(244, 244, 244));
        Input.setFocusable(false);
        Input.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InputActionPerformed(evt);
            }
        });

        Credits.setBackground(new java.awt.Color(242, 242, 242));
        Credits.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        Credits.setForeground(new java.awt.Color(128, 128, 128));
        Credits.setText("©: Daniel Ligutan");
        Credits.setBorder(null);
        Credits.setFocusable(false);
        Credits.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreditsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Input, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Output, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(Credits, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(13, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(Credits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addComponent(Input, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Output, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void checkOutputValidity(){
        if(Output.getText().equals("Invalid expression") || Output.getText().equals("Cannot be divided by 0")){
            Output.setText("");
        }
    }
    private void OutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OutputActionPerformed
        Output.setEditable(false);
    }//GEN-LAST:event_OutputActionPerformed

    private void InputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InputActionPerformed
        Input.setEditable(false);
    }//GEN-LAST:event_InputActionPerformed

    private void OneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OneActionPerformed
        checkOutputValidity();
        handleNumbers("1");
    }//GEN-LAST:event_OneActionPerformed

    private void FourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FourActionPerformed
        checkOutputValidity();
        handleNumbers("4");
    }//GEN-LAST:event_FourActionPerformed

    private void SevenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SevenActionPerformed
        checkOutputValidity();
        handleNumbers("7");
    }//GEN-LAST:event_SevenActionPerformed

    private void ZeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ZeroActionPerformed
        checkOutputValidity();
        handleNumbers("0");
    }//GEN-LAST:event_ZeroActionPerformed

    private void TwoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TwoActionPerformed
        checkOutputValidity();
        handleNumbers("2");
    }//GEN-LAST:event_TwoActionPerformed

    private void FiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FiveActionPerformed
        checkOutputValidity();
        handleNumbers("5");
    }//GEN-LAST:event_FiveActionPerformed

    private void EightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EightActionPerformed
        checkOutputValidity();
        handleNumbers("8");
    }//GEN-LAST:event_EightActionPerformed

    private void PointActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PointActionPerformed
        checkOutputValidity();
        if (!Output.getText().isEmpty()) {
            Input.setText("");
            Output.setText("");
        }
        if(Input.getText().equals("")){
            Input.setText("0.");
        } else if(Input.getText().charAt(Input.getText().length() - 1) == '+' || Input.getText().charAt(Input.getText().length() - 1) == '-' || Input.getText().charAt(Input.getText().length() - 1) == '×' || Input.getText().charAt(Input.getText().length() - 1) == '÷') {
            Input.setText(Input.getText() + "0.");
        } else{
            Input.setText(Input.getText() + ".");
        }
    }//GEN-LAST:event_PointActionPerformed

    private void ThreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ThreeActionPerformed
        checkOutputValidity();
        handleNumbers("3");
    }//GEN-LAST:event_ThreeActionPerformed

    private void SixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SixActionPerformed
        checkOutputValidity();
        handleNumbers("6");
    }//GEN-LAST:event_SixActionPerformed
    
    private void NegativeOrPositiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NegativeOrPositiveActionPerformed
        checkOutputValidity();
        String currentInput = Input.getText();
        String currentOutput = Output.getText();
    
        if (!currentOutput.isEmpty()) {
            currentInput = currentOutput;
            Output.setText("");
        }

        if (currentInput.contains("+") || currentInput.contains("-") || currentInput.contains("×") || currentInput.contains("÷")) {
            if (currentInput.startsWith("-")) {
                Input.setText(currentInput.substring(1));
            } else {
                Input.setText("-" + currentInput);
            }
        } else {
            if (currentInput.length() == 0) {
                Input.setText("-");
            } else if (currentInput.charAt(0) == '-') {
                Input.setText(currentInput.substring(1));
            } else {
                Input.setText("-" + currentInput);
            }
        }
    }//GEN-LAST:event_NegativeOrPositiveActionPerformed

    private void EqualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EqualActionPerformed
        int i;
        String input = Input.getText();
        boolean isAllNumbers = false;
        for(i = 0; i < input.length(); i++){
            if(Character.isDigit(input.charAt(i))){
                if(Character.isDigit(input.charAt(input.length() - 1))){
                    isAllNumbers = true;
                }
            } else{
                isAllNumbers = false;
                break;
            }
        }
        try {
            double result = evaluateExpression(input);
            if(isAllNumbers){
                Output.setText("");
            } else if(Input.getText().equals("")){
                Output.setText("");
            } else {
                Output.setText(formatResult(result));
            }
        } catch (ArithmeticException e) {
            Output.setText("Cannot be divided by 0");
        } catch (Exception e) {
            Output.setText("Invalid expression");
        }
    }//GEN-LAST:event_EqualActionPerformed
 
    private double evaluateExpression(String expression) throws Exception {
        if (expression.isEmpty())
            return 0;

        String[] parts = expression.split("(?<=[+\\-×÷])|(?=[+\\-×÷])");

        Stack<Double> numbers = new Stack<>();
        Stack<String> operators = new Stack<>();
        boolean isUnaryMinus = true;

        for (String part : parts) {
            if (part.matches("[+\\-×÷]")) {
                if (isUnaryMinus && part.equals("-")) {
                    operators.push("~");
                } else {
                    while (!operators.isEmpty() && hasPrecedence(part, operators.peek())) {
                        double num2 = numbers.pop();
                        double num1 = numbers.pop();
                        String op = operators.pop();
                        double result = performOperation(num1, num2, op);
                        numbers.push(result);
                    }
                    operators.push(part);
                }
                isUnaryMinus = true;
            } else {
                try {
                    double num = Double.parseDouble(part);
                    if (operators.isEmpty() || !operators.peek().equals("~")) {
                        numbers.push(num);
                    } else {
                        operators.pop();
                        numbers.push(-num);
                    }
                    isUnaryMinus = false;
                } catch (NumberFormatException e) {
                    throw new Exception("Invalid input");
                }
            }
        }

        while (!operators.isEmpty()) {
            double num2 = numbers.pop();
            double num1 = numbers.pop();
            String op = operators.pop();
            double result = performOperation(num1, num2, op);
            numbers.push(result);
        }
        return numbers.pop();
    }

    private boolean hasPrecedence(String op1, String op2) {
        if ((op1.equals("×") || op1.equals("÷")) && (op2.equals("+") || op2.equals("-")))
            return false;
        return true;
    }

    private double performOperation(double num1, double num2, String op) {
        switch (op) {
            case "+":
                return num1 + num2;
            case "-":
                return num1 - num2;
            case "×":
                return num1 * num2;
            case "÷":
                if (num2 == 0.0) {
                    throw new ArithmeticException("Division by zero");
                }
                return num1 / num2;
            default:
                return 0.0;
        }
    }

    private String formatResult(double result) {
        if (result == (long) result) {
            return String.format("%d", (long) result);
        } else {
            DecimalFormat df = new DecimalFormat("#.######");
            return df.format(result);
        }
    }
    
    private void AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddActionPerformed
        checkOutputValidity();
        handleNewOperation("+");
    }//GEN-LAST:event_AddActionPerformed

    private void SubtractActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubtractActionPerformed
        checkOutputValidity();
        handleNewOperation("-");
    }//GEN-LAST:event_SubtractActionPerformed

    private void MultiplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MultiplyActionPerformed
        checkOutputValidity();
        handleNewOperation("×");
    }//GEN-LAST:event_MultiplyActionPerformed

    private void DivideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DivideActionPerformed
        checkOutputValidity();
        handleNewOperation("÷");
    }//GEN-LAST:event_DivideActionPerformed
    private void handleNumbers(String input){
        if (!Output.getText().isEmpty()) {
            Input.setText("");
            Output.setText("");
        }
        if (Input.getText().equals("0")) {
            Input.setText(input);
        } else {
            Input.setText(Input.getText() + input);
        }
    }
    
    private void handleNewOperation(String newOperation){
        if (!Output.getText().isEmpty()) {
            Input.setText(Output.getText());
            Output.setText("");
        }

        String currentInput = Input.getText();

        if (!currentInput.isEmpty()) {
            char lastChar = currentInput.charAt(currentInput.length() - 1);
            char secondLastChar = ' ';
            if(currentInput.length() > 1){
                secondLastChar = currentInput.charAt(currentInput.length() - 2);
            }

            if (Character.isDigit(lastChar)) {
                Input.setText(currentInput + newOperation);
            } else if ((lastChar == '×' || lastChar == '÷') && newOperation.equals("-")) {
                Input.setText(currentInput + newOperation);
            } else if (lastChar == '+' && (newOperation.equals("-") || newOperation.equals("×") || newOperation.equals("÷"))) {
                Input.setText(currentInput.substring(0, currentInput.length() - 1) + newOperation);
            } else if (lastChar == '-') {
                if((secondLastChar == '×' || secondLastChar == '÷') && (newOperation.equals("+") || newOperation.equals("×") || newOperation.equals("÷"))){
                    Input.setText(currentInput.substring(0, currentInput.length() - 2) + newOperation);
                } else {
                    Input.setText(currentInput.substring(0, currentInput.length() - 1) + newOperation);
                }
            } else if (lastChar == '×' && (newOperation.equals("+") || newOperation.equals("÷"))) {
                Input.setText(currentInput.substring(0, currentInput.length() - 1) + newOperation);
            } else if (lastChar == '÷' && (newOperation.equals("+") || newOperation.equals("×"))) {
                Input.setText(currentInput.substring(0, currentInput.length() - 1) + newOperation);
            }
        } else if (newOperation.equals("-")){
            Input.setText("-");
        }
    }
    
    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        javax.swing.text.Document doc = Input.getDocument();
        int length = doc.getLength();
        Output.setText("");

        if (length > 0) {
            try {
                doc.remove(length - 1, 1);
            } catch (javax.swing.text.BadLocationException ex) {}
        }
    }//GEN-LAST:event_DeleteActionPerformed

    private void NineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NineActionPerformed
        checkOutputValidity();
        handleNumbers("9");
    }//GEN-LAST:event_NineActionPerformed

    private void ClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearActionPerformed
        Input.setText("");
        Output.setText("");
    }//GEN-LAST:event_ClearActionPerformed

    private void CreditsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreditsActionPerformed
        Credits.setEditable(false);
    }//GEN-LAST:event_CreditsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try{
            UIManager.setLookAndFeel(new FlatLightLaf());
        } catch (UnsupportedLookAndFeelException e){}

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Calculator().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Add;
    private javax.swing.JButton Clear;
    private javax.swing.JTextField Credits;
    private javax.swing.JButton Delete;
    private javax.swing.JButton Divide;
    private javax.swing.JButton Eight;
    private javax.swing.JButton Equal;
    private javax.swing.JButton Five;
    private javax.swing.JButton Four;
    private javax.swing.JTextField Input;
    private javax.swing.JButton Multiply;
    private javax.swing.JButton NegativeOrPositive;
    private javax.swing.JButton Nine;
    private javax.swing.JButton One;
    private javax.swing.JTextField Output;
    private javax.swing.JButton Point;
    private javax.swing.JButton Seven;
    private javax.swing.JButton Six;
    private javax.swing.JButton Subtract;
    private javax.swing.JButton Three;
    private javax.swing.JButton Two;
    private javax.swing.JButton Zero;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
